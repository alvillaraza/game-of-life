{"version":3,"sources":["components/Buttons.js","components/Grid.js","components/Rules.js","App.js","index.js"],"names":["Buttons","className","onClick","this","props","playButton","pauseButton","slow","fast","clear","random","React","Component","Box","activeBox","row","col","boxClass","id","Grid","width","cols","rowsArr","i","rows","k","boxId","gridFull","push","key","style","Rules","arrayClone","arr","JSON","parse","stringify","App","gridCopy","state","setState","Math","floor","clearInterval","intervalId","setInterval","play","speed","grid","Array","fill","map","generation","grid1","grid2","count","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b16f5dc7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Buttons extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"center\">\r\n          <button onClick={this.props.playButton}>\r\n            Play\r\n          </button>\r\n          <button onClick={this.props.pauseButton}>\r\n          Pause\r\n          </button>\r\n          <button onClick={this.props.slow}>\r\n          Slow\r\n          </button>\r\n          <button onClick={this.props.fast}>\r\n            Fast\r\n          </button>\r\n          <button onClick={this.props.clear}>\r\n            Clear\r\n          </button>\r\n          <button onClick={this.props.random}>\r\n            Randomize\r\n          </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons","import React from 'react';\r\n\r\nclass Box extends React.Component {\r\n  activeBox = () => {\r\n    this.props.activeBox(this.props.row, this.props.col);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={this.props.boxClass}\r\n        id={this.props.id}\r\n        onClick={this.activeBox}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass Grid extends React.Component {\r\n  render() {\r\n    const width = this.props.cols * 16;\r\n    var rowsArr = [];\r\n\r\n    var boxClass = \"\";\r\n    for (var i = 0; i < this.props.rows; i++) {\r\n      for (var k = 0; k < this.props.cols; k++) {\r\n        let boxId = i + \"_\" + k;\r\n\r\n        boxClass = this.props.gridFull[i][k] ? \"box on\" : \"box off\";\r\n        rowsArr.push(\r\n          <Box\r\n            boxClass={boxClass}\r\n            key={boxId}\r\n            boxId={boxId}\r\n            row={i}\r\n            col={k}\r\n            activeBox={this.props.activeBox}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"grid\" style={{ width: width }}>\r\n        {rowsArr}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid","import React from \"react\";\r\n\r\n\r\nclass Rules extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"rules\">\r\n        <p>The Game of Life, also known simply as Life, is a cellular automaton\r\n        devised by the British mathematician John Horton Conway in 1970. It\r\n        is a zero-player game, meaning that its evolution is determined by its\r\n        initial state, requiring no further input. One interacts with the Game\r\n        of Life by creating an initial configuration and observing how it\r\n        evolves. It is Turing complete and can simulate a universal constructor\r\n        or any other Turing machine. </p>\r\n        \r\n        <p>These rules, which compare the behavior of\r\n        the automaton to real life, can be condensed into the following:</p>\r\n        <ul>\r\n          <li>Any live cell with two or three live neighbours survives.</li>\r\n          <li>Any dead cell with three live neighbours becomes a live cell.</li>\r\n          <li>\r\n            All other live cells die in the next generation. Similarly, all\r\n            other dead cells stay dead.\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Rules;\r\n","import React from 'react';\nimport './App.css';\n\nimport Buttons from './components/Buttons'\nimport Grid from './components/Grid'\nimport Rules from './components/Rules'\n\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.speed = 100;\n    this.rows = 20;\n    this.cols = 40;\n\n    this.state = {\n      generation: 0,\n      gridFull: Array(this.rows)\n        .fill()\n        .map(() => Array(this.cols).fill(false)),\n    };\n  }\n\n  activeBox = (row, col) => {\n    let gridCopy = arrayClone(this.state.gridFull);\n    gridCopy[row][col] = !gridCopy[row][col];\n    this.setState({\n      gridFull: gridCopy,\n    });\n  };\n\n  random = () => {\n    let gridCopy = arrayClone(this.state.gridFull);\n    for (let i = 0; i < this.rows; i++) {\n      for (let k = 0; k < this.cols; k++) {\n        if (Math.floor(Math.random() * 4) === 1) {\n          gridCopy[i][k] = true;\n        }\n      }\n    }\n    this.setState({\n      gridFull: gridCopy,\n    });\n  };\n\n  playButton = () => {\n    clearInterval(this.intervalId);\n    this.intervalId = setInterval(this.play, this.speed);\n  };\n\n  pauseButton = () => {\n    clearInterval(this.intervalId);\n  };\n\n  slow = () => {\n    this.speed = 800;\n    this.playButton()\n  }\n\n  fast = () => {\n    this.speed = 100;\n    this.playButton()\n  }\n\n  clear = () => {\n    // clearInterval(this.intervalId);\n    var grid = Array(this.rows)\n      .fill()\n      .map(() => Array(this.cols).fill(false));\n    this.setState({ gridFull: grid, generation: 0 });\n\n  };\n\n\n  play = () => {\n    let grid1 = this.state.gridFull;\n    let grid2 = arrayClone(this.state.gridFull);\n    for (let i = 0; i < this.rows; i++) {\n      for (let k = 0; k < this.cols; k++) {\n        let count = 0;\n        if (i > 0) if (grid1[i - 1][k]) count++;\n        if (i > 0 && k > 0) if (grid1[i - 1][k - 1]) count++;\n        if (i > 0 && k < this.cols - 1) if (grid1[i - 1][k + 1]) count++;\n        if (k < this.cols - 1) if (grid1[i][k + 1]) count++;\n        if (k > 0) if (grid1[i][k - 1]) count++;\n        if (i < this.rows - 1) if (grid1[i + 1][k]) count++;\n        if (i < this.rows - 1 && k > 0) if (grid1[i + 1][k - 1]) count++;\n        if (i < this.rows - 1 && k < this.cols - 1)\n          if (grid1[i + 1][k + 1]) count++;\n        if (grid1[i][k] && (count < 2 || count > 3)) grid2[i][k] = false;\n        if (!grid1[i][k] && count === 3) grid2[i][k] = true;\n      }\n    }\n    this.setState({\n      gridFull: grid2,\n      generation: this.state.generation + 1,\n    });\n  };\n\n  componentDidMount() {\n    this.random();\n    this.playButton();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1> The Game of Life</h1>\n        <Buttons\n          playButton={this.playButton}\n          pauseButton={this.pauseButton}\n          slow={this.slow}\n          fast={this.fast}\n          clear={this.clear}\n          random={this.random}\n        />\n        <Grid\n          gridFull={this.state.gridFull}\n          rows={this.rows}\n          cols={this.cols}\n          activeBox={this.activeBox}\n        />\n        <h2> Generations: {this.state.generation}</h2>\n        <p><Rules/></p>\n      </div>\n    );\n  }\n}\n\nfunction arrayClone(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\"\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}